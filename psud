#! /usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Turku University (2018) Department of Future Technologies
# Foresail-1 / PATE Monitor / Middleware (PMAPI)
# PSU controller daemon
#
# psud.py - Jani Tammi <jasata@utu.fi>
#   0.1.0   2018.11.14  Initial version.
#   0.2.0   2018.11.16  Modified for output compatible with daemon and console.
#   0.3.0   2018.11.17  Final touches. (hopefully)
#   0.4.0   2018.11.17  Refactored.
#   0.4.1   2018.11.18  Minor fixes.
#   0.4.2   2018.11.24  Serial timeout handling plus speedups.
#
#
# Execute this script to start the daemon.
#
#       'main.py' will parse commandline and update Config accordingly.
#       This script will then invoke 'deamonify.py', which will transform
#       the process into a daemon (unless '--nodaemon' was specified).
#       'daemonify.py' will finally enter the program's main loop, which
#       is located in 'control.py'.
#
#       main.py -> daemonify.py -> control.py (using PSU.py)
#
#       Class files (names starting with capital letter) are used by the
#       'control.py' main loop to execute the tasks periodically.
#
__version__ = "0.4.2"
__author__  = "Jani Tammi <jasata@utu.fi>"
VERSION     = __version__
HEADER      = """
=============================================================================
University of Turku, Department of Future Technologies
ForeSail-1 / PATE Monitor
PATE Monitor / PSU Control Daemon version {}, 2018 {}
""".format(__version__, __author__)

import os
import sys
import time
import errno
import fcntl
import signal
import serial
import logging
import logging.handlers
import sqlite3
import platform
import argparse
from pathlib        import Path

# Application specific
import process
from Config         import Config, display_config
from Database       import Database




######################################################################
#
# Start-up routines
#
if __name__ == "__main__":


    # Print header with additional info
    print(HEADER)
    print(
        "Running on Python ver.{} on {} {}" \
        .format(
            platform.python_version(),
            platform.system(),
            platform.release()
        )
    )
    print(
        "SQLite ver.{} (pySQLite ver.{})" \
        .format(
            sqlite3.sqlite_version,
            sqlite3.version
        )
    )
    print("pySerial ver.{}".format(serial.VERSION))
    # If the number of cores cannot be determined, multiprocessing.cpu_count()
    # raises NotImplementedError, but os.cpu_count() returns None.
    print(
        "{} cores are available ({} cores in current OS)\n" \
        .format(
            os.cpu_count() or "Unknown number of",
            platform.architecture()[0]
        )
    )


    #
    # Commandline arguments
    #
    parser = argparse.ArgumentParser(
        description     = HEADER,
        formatter_class = argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        '-d',
        '--datafile',
        help    = "PATE Monitor SQLite3 database. Default: '{}'".format(Config.database_file),
        nargs   = '?',
        dest    = "database_file",
        default = Config.database_file,
        type    = str,
        metavar = "FILE"
    )
    parser.add_argument(
        '-l',
        '--log',
        help    = "Set logging level. Default: '{}'".format(Config.logging_level),
        choices = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
        nargs   = '?',
        dest    = "logging_level",
        const   = "INFO",
        default = Config.logging_level,
        type    = str.upper,
        metavar = "LEVEL"
    )
    parser.add_argument(
        '-p',
        '--port',
        help = "Set serial port device. Default: '{}'".format(Config.PSU.Serial.port),
        nargs = '?',
        dest = "port",
        const = "DEVICE",
        default = Config.PSU.Serial.port,
        type = str
    )
    parser.add_argument(
        '--nodaemon',
        help = 'Do not execute as a daemon',
        action = 'store_true'
    )
    parser.add_argument(
        '--kill',
        help = 'Kill daemon',
        action = 'store_true'
    )
    parser.add_argument(
        '--status',
        help = 'Get status report about the daemon',
        action = 'store_true'
    )
    args = parser.parse_args()


    #
    # Options that have default values are guaranteed to exist.
    #
    Config.database_file    = args.database_file
    Config.PSU.Serial.port  = args.port
    # Convert to numeric logging level
    Config.logging_level = getattr(logging, args.logging_level)
    # Store daemonization flag
    setattr(
        Config.PSU.Daemon,
        "run_as_daemon",
        not (args.nodaemon or False)
    )
    # Store lock file's path+name
    setattr(
        Config.PSU.Daemon,
        "lockfile",
        "{}/{}.lock".format(
            Config.PSU.Daemon.lock_directory,
            Config.PSU.Daemon.name
        )
    )


    #
    # Display Config class if running with DEBUG -mode
    #
    if Config.logging_level == logging.DEBUG:
        display_config(Config)
        print("\n\n")


    #
    # Display status report
    #
    if args.status:
        process.status()
        os._exit(0)


    #
    # Kill daemon
    #
    if args.kill:
        process.kill()
        os._exit(0)


    #
    # Warn user if psud is already running
    #
    pid = process.pid()
    if process.is_running(pid):
        print(
            "WARNING: '{}' seems to be already running! (PID: {})\n".format(
                Config.PSU.Daemon.name,
                pid
            )
        )


    #
    # Auto detect Agilent E3631
    #
    if Config.PSU.Serial.port.lower() == "auto":
        print("Auto detecting Agilent E3631 serial port...", end="", flush=True)
        from PSU import PSU
        Config.PSU.Serial.port = PSU.find()
        if Config.PSU.Serial.port is None:
            print("NOT FOUND!")
            print("Unable to find power supply. Exiting...")
            os._exit(-1)
        else:
            print("found at port '{}'.\n".format(Config.PSU.Serial.port))

    #
    # If not autodetected, and if we will run as a daemon...
    # we want to briefly test the serial port and report any
    # obvious problems to the user.
    #
    # NOTE: lint is confused. member variable DOES exist
    elif Config.PSU.Daemon.run_as_daemon:
        print("Opening '{}'...".format(Config.PSU.Serial.port), end = '', flush = True)
        try:
            port = serial.Serial(
                port            = Config.PSU.Serial.port,
                baudrate        = Config.PSU.Serial.baudrate,
                parity          = Config.PSU.Serial.parity,
                stopbits        = Config.PSU.Serial.stopbits,
                bytesize        = Config.PSU.Serial.bytesize,
                timeout         = Config.PSU.Serial.timeout,
                write_timeout   = Config.PSU.Serial.write_timeout
            )
        except Exception as e:
            print("FAILED!")
            print(str(e))
            os._exit(-1)
        else:
            print("OK")
            port.close()


    #
    # Check that database file exists
    #
    if not all(Database.filestatus(Config.database_file)):
        print(
            "Database '{}': {}".format(
                Config.database_file,
                Database.filestatusstring(Config.database_file)
            )
        )
        os._exit(-1)


    #
    # Start-up routines completed, deamonify (or don't)
    #
    import control
    if args.nodaemon:
        process.start_regular_process(control.psu)
    else:
        process.daemonify(control.psu)



# EOF