#! /usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Turku University (2018) Department of Future Technologies
# Foresail-1 / PATE Monitor / Middleware (PMAPI)
# PSU controller daemon
#
# main.py - Jani Tammi <jasata@utu.fi>
#   0.1.0   2018.11.14  Initial version.
#
#
# Execute this script to start the daemon.
#
#       'main.py' will parse commandline and update Config accordingly.
#       This script will then invoke 'deamonify.py', which will transform
#       the process into a daemon (unless '--nodaemon' was specified).
#       'daemonify.py' will finally enter the program's main loop, which
#       is located in 'control.py'.
#
#       main.py -> daemonify.py -> control.py
#
#       Class files (names starting with capital letter) are used by the
#       'control.py' main loop to execute the tasks periodically.
#
__version__ = "0.1.0"
__author__  = "Jani Tammi <jasata@utu.fi>"
VERSION     = __version__
HEADER      = """
=============================================================================
University of Turku, Department of Future Technologies
ForeSail-1 / PATE Monitor
OBC Emulator Daemon version {}, 2018 {}
""".format(__version__, __author__)

import os
import sys
import time
import errno
import fcntl
import signal
import serial
import logging
import logging.handlers
import sqlite3
import platform
import argparse

from Config         import Config, display_config
from pathlib        import Path
from control        import *                # Most importantly: control.psu()




def start_regular_process(function, config=Config):
    """Change directory, create lock file, run."""

    # logging.basicConfig(
    #     level       = Config.LogLevel,
    #     filename    = "pbbes.log",
    #     format      = '%(asctime)s %(levelname)s %(name)s: %(message)s',
    #     datefmt     = '%H:%M:%S'
    # )
    # log = logging.getLogger(config.PSU.Daemon.name)
    # log.addHandler(logging.handlers.SysLogHandler())
    # log.debug("whee!")

    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    syslog = logging.handlers.SysLogHandler(address=('localhost', 514))
    formatter = logging.Formatter('%(asctime)s %(name)s: %(levelname)s %(message)s', '%b %e %H:%M:%S')
    syslog.setFormatter(formatter)
    logger.addHandler(syslog)
    logger.info("My Message")


    try:
        os.chdir(config.PSU.Daemon.working_directory)
    except Exception as e:
        print(
            "Unable to change directory to '{}'!\n".format(
                config.PSU.Daemon.working_directory
            )
        )
        print(str(e))
        os._exit(-1)

    #
    # Execute main loop
    #
    try:
        from Lockfile import Lockfile
        with Lockfile("/tmp/{}.lock".format(Config.PSU.Daemon.name)):
            function(config)
    except Lockfile.AlreadyRunning as e:
        print(str(e))
    except Exception as e:
        print("Main loop ended with an exception!\n", str(e))
    else:
        print("Normal termination.")



def kill():
    """Reads PID from a lockfile, kills pid and removed lockfile."""
    def rm(filename):
        try:
            os.remove(filename)
        except OSError:
            pass
    lockfilename = "{}/{}.lock".format(
        Config.PSU.Daemon.lock_directory,
        Config.PSU.Daemon.name
    )
    try:
        with open(lockfilename, "r") as lockfile:
            pid = int(lockfile.readline())
            #
            # Check for stale lockfile
            #
            try:
                os.kill(pid, 0)
            except OSError:
                print(
                    "Stale lockfile. Daemon (pid: {}) does not exist.".format(
                        pid
                    )
                )
                print(
                    "Removing stale lockfile '{}'".format(
                        lockfilename
                    )
                )
                rm(lockfilename)
                os._exit(0)
            #
            # PID is running, proceed in killing it
            #
            print("Terminating pid {}".format(pid))
            os.kill(pid, signal.SIGTERM)
            # Try to verify kill (not sure if os.kill() returns immediately)
            for _ in range(50):
                try:
                    os.kill(pid, 0)
                except OSError:
                    rm(lockfilename)
                    print("Daemon killed.")
                    os._exit(0)
                else:
                    time.sleep(0.05)
            # Strange - process seems to be still alive
            print("ERROR: Process ({}) seems to be still alive!".format(pid))
    except FileNotFoundError:
        print("ERROR: No lock file ('{}') for the daemon!".format(
            lockfilename
            )
        )
        os._exit(-1)
    except ValueError:
        print("ERROR: Content of the lock file is not a valid process id!")
        os._exit(-1)
    except OSError:
        print(
            "ERROR: pid ({}) does not respond to SIGTERM.".format(
                pid or "unknown"
            )
        )
        os._exit(-1)




######################################################################
#
# Start-up routines
#
if __name__ == "__main__":

    # Print header with additional info
    print(HEADER)
    print(
        "Running on Python ver.{} on {} {}" \
        .format(
            platform.python_version(),
            platform.system(),
            platform.release()
        )
    )
    print(
        "SQLite ver.{} (pySQLite ver.{})" \
        .format(
            sqlite3.sqlite_version,
            sqlite3.version
        )
    )
    print("pySerial ver.{}".format(serial.VERSION))
    # If the number of cores cannot be determined, multiprocessing.cpu_count()
    # raises NotImplementedError, but os.cpu_count() returns None.
    print(
        "{} cores are available ({} cores in current OS)\n" \
        .format(
            os.cpu_count() or "Unknown number of",
            platform.architecture()[0]
        )
    )



    #
    # Commandline arguments
    #
    parser = argparse.ArgumentParser(
        description     = HEADER,
        formatter_class = argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        '-d',
        '--datafile',
        help    = "PATE Monitor SQLite3 database file path and name",
        nargs   = '?',
        dest    = "database_file",
        default = Config.database_file,
        type    = str,
        metavar = "FILE"
    )
    parser.add_argument(
        '-l',
        '--log',
        help    = "Set logging level",
        choices = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
        nargs   = '?',
        dest    = "logging_level",
        const   = "INFO",
        default = Config.logging_level,
        type    = str.upper,
        metavar = "LEVEL"
    )
    parser.add_argument(
        '-p',
        '--port',
        help = "Set serial port device. Default: '{}'".format(Config.PSU.port),
        nargs = '?',
        dest = "serial_port",
        const = "DEVICE",
        default = Config.PSU.port,
        type = str
    )
    parser.add_argument(
        '--nodaemon',
        help = 'Do not execute as a daemon',
        action = 'store_true'
    )
    parser.add_argument(
        '--kill',
        help = 'Kill daemon',
        action = 'store_true'
    )
    args = parser.parse_args()

    #
    # Create instance of Config and update according to commandline.
    #
    Config.logging_level = getattr(logging, args.logging_level)
    Config.database_file = args.database_file
    Config.PSU.port      = args.serial_port

    if Config.logging_level == logging.DEBUG:
        display_config(Config)
        print("\n\n")


    #
    # Test-open serial port
    #
    print("Opening {}...".format(Config.PSU.port), end = '', flush = True)
    try:
        port = serial.Serial(
            port            = Config.PSU.port,
            baudrate        = Config.PSU.baudrate,
            parity          = Config.PSU.parity,
            stopbits        = Config.PSU.stopbits,
            bytesize        = Config.PSU.bytesize,
            timeout         = Config.PSU.timeout,
            write_timeout   = Config.PSU.write_timeout
        )
    except Exception as e:
        print("FAILED!")
        print(str(e))
        os._exit(-1)
    else:
        print("OK")
        port.close()

    #
    # Kill daemon
    #
    if args.kill:
        kill()
        os._exit(0)


    #
    # database file open/create
    #
    # dbfile = Path(Config.database_file)
    # if not dbfile.is_file():
    #     print(Config.database_file, "not found!")
    #     os._exit(-1)

    if not os.path.isfile(Config.database_file):
        print("Database file '{}' does NOT exist".format(Config.database_file))
        os._exit(-1)


    #
    # Start-up routines completed, deamonify
    #
    from control import psu
    if args.nodaemon:
        start_regular_process(psu, Config)
    else:
        import daemonify
        daemonify.process(psu, Config)



# EOF
